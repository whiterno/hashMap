--------------------------------------------------------------------------------
Profile data file 'callgrind.out.124229' (creator: callgrind-3.22.0)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 71552556
Trigger: Program termination
Profiled target:  ./build/main 100 (PID 124229, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
360,199,504 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
110,839,530 (30.77%)  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:__strcmp_avx2 [/usr/lib/x86_64-linux-gnu/libc.so.6]
 69,461,772 (19.28%)  src/list.cpp:searchElement(List*, string_t) [/root/hashMap/build/main]
 53,681,505 (14.90%)  src/hash_funcs.cpp:_mm_crc32HashString(string_t) [/root/hashMap/build/main]
 27,967,742 ( 7.76%)  ./stdlib/./stdlib/random_r.c:random_r [/usr/lib/x86_64-linux-gnu/libc.so.6]
 26,000,000 ( 7.22%)  src/hash_map.cpp:hashMapSearchElement(HashMap*, string_t) [/root/hashMap/build/main]
 23,000,000 ( 6.39%)  ./stdlib/./stdlib/random.c:random [/usr/lib/x86_64-linux-gnu/libc.so.6]
 17,056,730 ( 4.74%)  src/tests.cpp:testSearchTime(_IO_FILE*, unsigned int (*)(string_t), TestData, unsigned int) [/root/hashMap/build/main]
  9,826,656 ( 2.73%)  ???:0x0000000000109260 [???]
  6,137,796 ( 1.70%)  /usr/lib/gcc/x86_64-linux-gnu/13/include/smmintrin.h:_mm_crc32HashString(string_t)
  6,000,000 ( 1.67%)  ./stdlib/./stdlib/rand.c:rand [/usr/lib/x86_64-linux-gnu/libc.so.6]
  2,960,269 ( 0.82%)  src/list.cpp:pushListElem(List*, string_t) [/root/hashMap/build/main]
  2,000,000 ( 0.56%)  ???:0x0000000000109310 [???]
  1,154,748 ( 0.32%)  ./malloc/./malloc/malloc.c:_int_malloc [/usr/lib/x86_64-linux-gnu/libc.so.6]
    795,938 ( 0.22%)  src/hash_map.cpp:hashMapAddElement(HashMap*, string_t) [/root/hashMap/build/main]

--------------------------------------------------------------------------------
-- Auto-annotated source: src/tests.cpp
--------------------------------------------------------------------------------
Ir                 

-- line 8 ----------------------------------------
        .           #include <random>
        .           
        .           #include "hash_funcs.h"
        .           #include "hash_map.h"
        .           #include "list.h"
        .           #include "utils.h"
        .           #include "tests.h"
        .           
       11 ( 0.00%)  void testAll(const char* filename, uint32_t test_amount){
        1 ( 0.00%)      size_t file_size = 0;
        4 ( 0.00%)      char* text = readFile("book.txt", &file_size);
   62,396 ( 0.02%)  => /root/hashMap/src/utils.cpp:readFile(char const*, unsigned long*) (1x)
        .           
        4 ( 0.00%)      uint32_t lines = countLines(text, file_size);
  241,977 ( 0.07%)  => /root/hashMap/src/utils.cpp:countLines(char*, unsigned long) (1x)
        .           
        4 ( 0.00%)      TestData test_data = {.data_array = buildStringArray(text, lines),
  355,451 ( 0.10%)  => /root/hashMap/src/hash_map.cpp:buildStringArray(char*, unsigned int) (1x)
        .                                     .lines = lines};
        .           
        .               // TEST(crc32);
        .               TEST(_mm_crc32);
        .               // TEST(murmur3);
        .               // TEST(sum);
        .               // TEST(adler32);
        .               // TEST(elf);
        .           
        2 ( 0.00%)      free(text);
      170 ( 0.00%)  => ???:0x00000000001091b0 (1x)
        2 ( 0.00%)      free(test_data.data_array);
      246 ( 0.00%)  => ???:0x00000000001091b0 (1x)
       10 ( 0.00%)  }
        .           
        .           void test(hash_t hash_func, Filenames filenames, TestData test_data, uint32_t test_amount){
        .               // FILE* collison_file = fopen(filenames.collision_filename, "w");
        .               // testCollisions(collison_file, hash_func, test_data);
        .               // fclose(collison_file);
        .           
        .               // printf("------------------------------\n");
        .           
        .               // FILE* build_file = fopen(filenames.build_filename, "w");
        .               // testBuildTime(build_file, hash_func, test_data, test_amount);
        .               // fclose(build_file);
        .           
        .               // printf("------------------------------\n");
        .           
        4 ( 0.00%)      FILE* search_file = fopen(filenames.search_filename, "w");
      611 ( 0.00%)  => ???:0x00000000001092d0 (1x)
        6 ( 0.00%)      testSearchTime(search_file, hash_func, test_data, test_amount);
359,351,001 (99.76%)  => src/tests.cpp:testSearchTime(_IO_FILE*, unsigned int (*)(string_t), TestData, unsigned int) (1x)
        2 ( 0.00%)      fclose(search_file);
      413 ( 0.00%)  => ???:0x00000000001091e0 (1x)
        .           }
        .           
        .           void testCollisions(FILE* file, hash_t hash_func, TestData test_data){
        .               assert(file);
        .           
        .               HashMap hashMap = hashMapCtor(hash_func, BASE_HASH_MAP_CAPACITY);
        .           
        .               for (int j = 0; j < test_data.lines; j++){
-- line 59 ----------------------------------------
-- line 109 ----------------------------------------
        .               average_time /= test_amount;
        .           
        .               printf("AVERAGE BUILD TIME: %'ld\n", average_time);
        .               printf("STANDART DEVIATION: %'ld\n", standartDeviationTime(build_time_array, test_amount, average_time));
        .           
        .               free(build_time_array);
        .           }
        .           
       12 ( 0.00%)  void testSearchTime(FILE* file, hash_t hash_func, TestData test_data, uint32_t test_amount){
        3 ( 0.00%)      assert(file);
        2 ( 0.00%)      srand(10);
    6,234 ( 0.00%)  => ???:0x0000000000109240 (1x)
        .           
        8 ( 0.00%)      HashMap hashMap = hashMapCtor(hash_func, BASE_HASH_MAP_CAPACITY);
      800 ( 0.00%)  => /root/hashMap/src/hash_map.cpp:hashMapCtor(unsigned int (*)(string_t), unsigned int) (1x)
   23,394 ( 0.01%)      for (int j = 0; j < test_data.lines; j++){
   31,184 ( 0.01%)          hashMapAddElement(&hashMap, test_data.data_array[j]);
11,150,728 ( 3.10%)  => /root/hashMap/src/hash_map.cpp:hashMapAddElement(HashMap*, string_t) (7,796x)
        .               }
        .           
        5 ( 0.00%)      uint32_t* index_array = (uint32_t*)calloc(SEARCH_ELEMS_AMOUNT, sizeof(uint32_t));
   40,751 ( 0.01%)  => ???:0x0000000000109250 (1x)
        5 ( 0.00%)      int64_t* search_time_array = (int64_t*)calloc(test_amount, sizeof(int64_t));
      217 ( 0.00%)  => ???:0x0000000000109250 (1x)
        .           
      408 ( 0.00%)      for (int i = 0; i < test_amount; i++){
3,000,300 ( 0.83%)          for (int j = 0; j < SEARCH_ELEMS_AMOUNT; j++){
4,000,000 ( 1.11%)              index_array[j] = rand() % test_data.lines;
58,967,742 (16.37%)  => ???:0x0000000000109310 (1,000,000x)
        .                   }
        .           
        .                   int64_t start_time = _rdtsc();
        .           
3,000,100 ( 0.83%)          for (int j = 0; j < SEARCH_ELEMS_AMOUNT; j++){
7,000,000 ( 1.94%)              hashMapSearchElement(&hashMap, test_data.data_array[index_array[j]]);
271,887,493 (75.48%)  => /root/hashMap/src/hash_map.cpp:hashMapSearchElement(HashMap*, string_t) (1,000,000x)
        .                   }
        .           
        .                   int64_t end_time = _rdtsc();
        .           
      300 ( 0.00%)          search_time_array[i] = end_time - start_time;
        .               }
        .           
       13 ( 0.00%)      hashMapDtor(&hashMap);
  236,713 ( 0.07%)  => /root/hashMap/src/hash_map.cpp:hashMapDtor(HashMap*) (1x)
        .           
        .               uint64_t average_time = 0;
        .           
        .               // fprintf(file, "Test index,Time\n");
      114 ( 0.00%)      for (uint32_t i = 0; i < test_amount; i++){
        .                   // fprintf(file, "%u,%ld\n", i, search_time_array[i]);
      150 ( 0.00%)          average_time += search_time_array[i];
        .               }
        .           
        5 ( 0.00%)      average_time /= test_amount;
        .           
        .               printf("AVERAGE SEARCH TIME: %'ld\n", average_time);
        .               printf("STANDART DEVIATION : %'ld\n", standartDeviationTime(search_time_array, test_amount, average_time));
        .           
        2 ( 0.00%)      free(search_time_array);
       87 ( 0.00%)  => ???:0x00000000001091b0 (1x)
        5 ( 0.00%)      free(index_array);
      273 ( 0.00%)  => ???:0x00000000001091b0 (1x)
        7 ( 0.00%)  }
        .           
        .           int64_t standartDeviationTime(int64_t* time_array, uint32_t length, uint32_t average){
        3 ( 0.00%)      assert(time_array);
        .           
        3 ( 0.00%)      int64_t standart_deviation = 0;
      300 ( 0.00%)      for (uint32_t i = 0; i < length; i++){
      401 ( 0.00%)          standart_deviation += (time_array[i] - average) * (time_array[i] - average);
        .               }
        6 ( 0.00%)      standart_deviation = (int64_t)sqrt((float)standart_deviation / length);
        .           
        .               return standart_deviation;
        .           }
        .           
        .           float standartDeviationCollisions(HashMap* hashMap, float average){
        .               assert(hashMap);
        .           
        .               float standart_deviation = 0;
-- line 179 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: src/hash_map.cpp
--------------------------------------------------------------------------------
Ir                 

-- line 11 ----------------------------------------
        .           #include "hash_funcs.h"
        .           #include "hash_map.h"
        .           #include "utils.h"
        .           #include "list.h"
        .           
        .           static uint32_t rehashAddElement(HashMap* hashMap, data_t data);
        .           static HashMap rehash(HashMap* hashMap);
        .           
        6 ( 0.00%)  string_t* buildStringArray(char* text, uint32_t lines){
        2 ( 0.00%)      assert(text);
        .           
        7 ( 0.00%)      string_t* string_array = (string_t*)calloc(lines, sizeof(string_t));
   74,483 ( 0.02%)  => ???:0x0000000000109250 (1x)
        .           
   23,394 ( 0.01%)      for (uint32_t i = 0; i < lines; i++){
    7,796 ( 0.00%)          string_array[i].string = text;
        .           
        .                   text  = strchr(text, '\n');
   15,592 ( 0.00%)          *text = '\0';
    7,796 ( 0.00%)          text++;
        .           
   23,388 ( 0.01%)          string_array[i].length = text - string_array[i].string;
        .               }
        .           
        .               return string_array;
        7 ( 0.00%)  }
        .           
       11 ( 0.00%)  HashMap hashMapCtor(hash_t hash_func, uint32_t capacity){
        1 ( 0.00%)      HashMap hashMap = {.lists = NULL,
        .                                  .capacity = capacity,
        .                                  .load_factor = 0,
        2 ( 0.00%)                         .hash_func = hash_func};
        .           
       49 ( 0.00%)      hashMap.lists = (List*)calloc(capacity, sizeof(List));
      225 ( 0.00%)  => ???:0x0000000000109250 (1x)
        .           
    6,226 ( 0.00%)      for (uint32_t i = 0; i < capacity; i++){
   12,276 ( 0.00%)          hashMap.lists[i] = listCtor();
      522 ( 0.00%)  => /root/hashMap/src/list.cpp:listCtor() (2x)
        .               }
        .           
        .               return hashMap;
       10 ( 0.00%)  }
        .           
   85,756 ( 0.02%)  uint32_t hashMapAddElement(HashMap* hashMap, data_t data){
   31,184 ( 0.01%)      assert(hashMap);
        .           
   38,980 ( 0.01%)      data.hash = hashMap->hash_func(data);
  462,830 ( 0.13%)  => /root/hashMap/src/hash_funcs.cpp:_mm_crc32HashString(string_t) (7,796x)
   31,184 ( 0.01%)      uint32_t inx = data.hash % hashMap->capacity;
        .           
   77,960 ( 0.02%)      uint32_t counter = pushListElem(hashMap->lists + inx, data);
4,231,038 ( 1.17%)  => /root/hashMap/src/list.cpp:pushListElem(List*, string_t) (7,796x)
        .           
   15,592 ( 0.00%)      if (counter == 1)
   62,368 ( 0.02%)          hashMap->load_factor = (hashMap->load_factor * hashMap->capacity + 1) / hashMap->capacity;
        .           
   15,592 ( 0.00%)      if (hashMap->load_factor >= LOAD_FACTOR)
       54 ( 0.00%)          *hashMap = rehash(hashMap);
        .           
        9 ( 0.00%)      return inx;
   93,552 ( 0.03%)  }
        .           
        .           uint32_t hashMapPopElement(HashMap* hashMap, data_t data){
        .               assert(hashMap);
        .           
        .               data.hash = hashMap->hash_func(data);
        .               uint32_t inx = data.hash % hashMap->capacity;
        .           
        .               if (popListElem(hashMap->lists + inx, data) == 0) return hashMap->capacity;
        .           
        .               hashMap->load_factor = (hashMap->load_factor * hashMap->capacity - 1) / hashMap->capacity;
        .           
        .               return inx;
        .           }
        .           
4,000,000 ( 1.11%)  bool hashMapSearchElement(HashMap* hashMap, data_t data){
4,000,000 ( 1.11%)      assert(hashMap);
        .           
4,000,000 ( 1.11%)      uint32_t supposed_index = hashMap->hash_func(data) % hashMap->capacity;
59,356,471 (16.48%)  => /root/hashMap/src/hash_funcs.cpp:_mm_crc32HashString(string_t) (1,000,000x)
8,000,000 ( 2.22%)      uint32_t inx = searchElement(&hashMap->lists[supposed_index], data);
186,531,022 (51.79%)  => /root/hashMap/src/list.cpp:searchElement(List*, string_t) (1,000,000x)
        .           
2,000,000 ( 0.56%)      if (inx == 0) return false;
        .           
        .               return true;
4,000,000 ( 1.11%)  }
        .           
        4 ( 0.00%)  void hashMapDtor(HashMap* hashMap){
        2 ( 0.00%)      assert(hashMap);
        .           
    6,189 ( 0.00%)      for (uint32_t i = 0; i < hashMap->capacity; i++){
    7,162 ( 0.00%)          listDtor(hashMap->lists + i);
  229,298 ( 0.06%)  => /root/hashMap/src/list.cpp:listDtor(List*) (1,024x)
        .               }
        .           
    1,042 ( 0.00%)      free(hashMap->lists);
      230 ( 0.00%)  => ???:0x00000000001091b0 (1x)
        3 ( 0.00%)  }
        .           
        .           static uint32_t rehashAddElement(HashMap* hashMap, data_t data){
        .               assert(hashMap);
        .           
   30,660 ( 0.01%)      uint32_t inx = data.hash % hashMap->capacity;
        .           
  107,310 ( 0.03%)      uint32_t counter = pushListElem(hashMap->lists + inx, data);
4,854,453 ( 1.35%)  => /root/hashMap/src/list.cpp:pushListElem(List*, string_t) (15,330x)
        .           
        .               return inx;
        .           }
        .           
        .           static HashMap rehash(HashMap* hashMap){
        .               assert(hashMap);
        .           
       54 ( 0.00%)      HashMap new_hashMap = hashMapCtor(hashMap->hash_func, hashMap->capacity * 2);
       27 ( 0.00%)      new_hashMap.load_factor = hashMap->load_factor / 2;
        .           
    4,133 ( 0.00%)      for (uint32_t i = 0; i < hashMap->capacity; i++){
    4,088 ( 0.00%)          uint32_t elem_inx = (hashMap->lists + i)->list_elems[0].next_inx;
        .           
   33,726 ( 0.01%)          while (elem_inx != 0){
   61,320 ( 0.02%)              data_t data = (hashMap->lists + i)->list_elems[elem_inx].data;
   15,330 ( 0.00%)              rehashAddElement(&new_hashMap, data);
        .           
   61,320 ( 0.02%)              elem_inx = (hashMap->lists + i)->list_elems[elem_inx].next_inx;
        .                   }
        .               }
        .           
        .               hashMapDtor(hashMap);
        .           
        .               return new_hashMap;
        .           }
        .           
-- line 134 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: src/list.cpp
--------------------------------------------------------------------------------
Ir                  

-- line 4 ----------------------------------------
         .           #include <stdio.h>
         .           
         .           #include "hash_map.h"
         .           #include "list.h"
         .           
         .           static void resizeUp(List* list);
         .           static int cmpListElems(data_t* data1, data_t* data2);
         .           
     6,138 ( 0.00%)  List listCtor(){
     2,046 ( 0.00%)      List list = {.list_elems = NULL, .capacity = LIST_BASE_CAPACITY};
     8,184 ( 0.00%)      list.list_elems = (ListElem*)calloc(LIST_BASE_CAPACITY, sizeof(ListElem));
   526,135 ( 0.15%)  => ???:0x0000000000109250 (2,046x)
     2,046 ( 0.00%)      list.list_elems[0].next_inx = 0;
         .               list.list_elems[0].prev_inx = 0;
         .               list.elements_amount = 0;
         .           
     4,092 ( 0.00%)      list.tail_inx = 1;
         .               for (uint32_t i = 1; i < LIST_BASE_CAPACITY; i++){
    12,276 ( 0.00%)          list.list_elems[i].next_inx = i + 1;
         .                   list.list_elems[i].prev_inx = i;
         .               }
         .           
         .               return list;
     6,138 ( 0.00%)  }
         .           
   185,008 ( 0.05%)  int pushListElem(List* list, data_t data){
    46,252 ( 0.01%)      assert(list);
         .           
         .               uint32_t inx = searchElement(list, data);
         .           
         .               if (inx == 0){
    46,252 ( 0.01%)          inx            = list->tail_inx;
    92,504 ( 0.03%)          list->tail_inx = list->list_elems[inx].next_inx;
         .           
    46,252 ( 0.01%)          list->list_elems[inx].data    = data;
    23,126 ( 0.01%)          list->list_elems[inx].counter = 0;
    23,126 ( 0.01%)          uint32_t old_last_inx         = list->list_elems[0].prev_inx;
         .           
    23,126 ( 0.01%)          list->list_elems[inx].next_inx = 0;
    23,126 ( 0.01%)          list->list_elems[inx].prev_inx = old_last_inx;
         .           
    23,126 ( 0.01%)          list->list_elems[0].prev_inx            = inx;
    46,252 ( 0.01%)          list->list_elems[old_last_inx].next_inx = inx;
         .           
    46,252 ( 0.01%)          list->elements_amount++;
         .               }
         .           
    23,126 ( 0.01%)      list->list_elems[inx].counter++;
         .           
    46,252 ( 0.01%)      if (list->tail_inx == list->capacity) resizeUp(list);
         .           
     8,588 ( 0.00%)      return list->list_elems[inx].counter;
   208,134 ( 0.06%)  }
         .           
         .           int popListElem(List* list, data_t data){
         .               assert(list);
         .           
         .               uint32_t inx = searchElement(list, data);
         .           
         .               if (inx == 0) return 0;
         .           
-- line 63 ----------------------------------------
-- line 74 ----------------------------------------
         .               list->list_elems[inx].next_inx = list->tail_inx;
         .               list->tail_inx = inx;
         .           
         .               list->elements_amount--;
         .           
         .               return inx;
         .           }
         .           
 6,000,000 ( 1.67%)  int searchElement(List* list, data_t data){
 2,000,000 ( 0.56%)      assert(list);
         .           
 3,115,630 ( 0.86%)      uint32_t inx = list->list_elems[0].next_inx;
         .           
 9,874,953 ( 2.74%)      while (inx != 0){
25,566,640 ( 7.10%)          if (cmpListElems(&data, &list->list_elems[inx].data) == 0) return inx;
         .           
 3,913,328 ( 1.09%)          inx = list->list_elems[inx].next_inx;
         .               }
         .           
         .               return inx;
 6,000,000 ( 1.67%)  }
         .           
         .           static void resizeUp(List* list){
     8,588 ( 0.00%)      list->capacity  *= 2;
    21,470 ( 0.01%)      list->list_elems = (ListElem*)realloc(list->list_elems, list->capacity * sizeof(ListElem));
 2,354,968 ( 0.65%)  => ???:0x00000000001092a0 (4,294x)
    17,176 ( 0.00%)      memset(list->list_elems + list->capacity / 2, '\0', list->capacity / 2 * sizeof(ListElem));
   109,372 ( 0.03%)      for (uint32_t i = list->tail_inx; i < list->capacity; i++){
   113,666 ( 0.03%)          list->list_elems[i].next_inx = i + 1;
    30,732 ( 0.01%)          list->list_elems[i].prev_inx = i;
         .               }
         .           }
         .           
         .           static int cmpListElems(data_t* data1, data_t* data2){
         .               assert(data1);
         .               assert(data2);
         .           
14,739,984 ( 4.09%)      return strcmp(data1->string, data2->string);
 3,596,936 ( 1.00%)  => ???:0x0000000000109260 (144,076x)
         .           }
         .           
     4,092 ( 0.00%)  void listDtor(List* list){
     6,138 ( 0.00%)      assert(list);
         .           
     4,092 ( 0.00%)      free(list->list_elems);
   422,840 ( 0.12%)  => ???:0x00000000001091b0 (2,046x)
         .           
         .               list->capacity = 0;
     2,046 ( 0.00%)      list->tail_inx = 0;
     4,092 ( 0.00%)  }
         .           
         .           void debugPrint(List* list){
         .               assert(list);
         .           
         .               printf("CAPACITY: %u\n", list->capacity);
         .               printf("TAIL_INX: %u\n", list->tail_inx);
         .               printf("ELEM_AM : %u\n", list->elements_amount);
         .               printf("INXS:     ");
-- line 128 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: src/hash_funcs.cpp
--------------------------------------------------------------------------------
Ir                  

-- line 26 ----------------------------------------
         .               for (int i = 4 - string.length % 4; i > 0; i--){
         .                   chars *= 256;
         .               }
         .               if (chars != 0) hash += crc32_u32(crc, chars);
         .           
         .               return hash;
         .           }
         .           
 2,015,592 ( 0.56%)  uint32_t _mm_crc32HashString(string_t string){
 4,003,090 ( 1.11%)      uint32_t hash   = 0;
         .               uint32_t chars  = 0;
         .               uint32_t crc    = 0x12345678;
 2,015,592 ( 0.56%)      int length =  int(string.length);
    14,047 ( 0.00%)      int remainder = 0;
         .           
 9,725,499 ( 2.70%)      for (; remainder < length - 3; remainder += 4){
         .                   chars = *(uint32_t*)(string.string + remainder);
 1,576,220 ( 0.44%)          hash += _mm_crc32_u32(crc, chars);
         .               }
         .           
 1,521,776 ( 0.42%)      chars = 0;
11,096,490 ( 3.08%)      for (int i = remainder; i < length; i++){
 4,515,570 ( 1.25%)          chars = chars * 256 + string.string[i];
         .               }
12,146,888 ( 3.37%)      for (int i = 4 - length % 4; i > 0; i--){
 1,014,444 ( 0.28%)          chars *= 256;
         .               }
 2,020,705 ( 0.56%)      if (chars != 0) hash += _mm_crc32_u32(crc, chars);
         .           
         .               return hash;
 2,015,592 ( 0.56%)  }
         .           
         .           uint32_t murmur3HashString(string_t string){
         .               uint32_t num    = 0x5bd1e995;
         .               uint32_t seed   = 0;
         .               int32_t  shift  = 24;
         .               uint32_t length = string.length;
         .               unsigned char* data = (unsigned char*)string.string;
         .           
-- line 64 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/lib/gcc/x86_64-linux-gnu/13/include/smmintrin.h
--------------------------------------------------------------------------------
Ir                 

-- line 828 ----------------------------------------
        .           _mm_crc32_u16 (unsigned int __C, unsigned short __V)
        .           {
        .             return __builtin_ia32_crc32hi (__C, __V);
        .           }
        .           
        .           extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
        .           _mm_crc32_u32 (unsigned int __C, unsigned int __V)
        .           {
6,137,796 ( 1.70%)    return __builtin_ia32_crc32si (__C, __V);
        .           }
        .           
        .           #ifdef __x86_64__
        .           extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
        .           _mm_crc32_u64 (unsigned long long __C, unsigned long long __V)
        .           {
        .             return __builtin_ia32_crc32di (__C, __V);
        .           }
-- line 844 ----------------------------------------

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./malloc/./malloc/malloc.c
  ./stdlib/./stdlib/rand.c
  ./stdlib/./stdlib/random.c
  ./stdlib/./stdlib/random_r.c
  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
176,240,666 (48.93%)  events annotated

