--------------------------------------------------------------------------------
Profile data file 'callgrind.out.133365' (creator: callgrind-3.22.0)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 477560625
Trigger: Program termination
Profiled target:  ./build/main 1000 (PID 133365, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
2,265,480,385 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
698,619,718 (30.84%)  src/list.cpp:searchElement(List*, string_t) [/root/hashMap/build/main]
289,206,498 (12.77%)  ???:0x0000000000003910 [/root/hashMap/build/main]
279,677,420 (12.35%)  ./stdlib/./stdlib/random_r.c:random_r [/usr/lib/x86_64-linux-gnu/libc.so.6]
260,000,000 (11.48%)  src/hash_map.cpp:hashMapSearchElement(HashMap*, string_t) [/root/hashMap/build/main]
230,000,000 (10.15%)  ./stdlib/./stdlib/random.c:random [/usr/lib/x86_64-linux-gnu/libc.so.6]
180,071,708 ( 7.95%)  src/tests.cpp:testSearchTime(_IO_FILE*, unsigned int (*)(string_t), TestData, unsigned int) [/root/hashMap/build/main]
172,871,724 ( 7.63%)  src/hash_funcs.cpp:_mm_crc32HashString(string_t) [/root/hashMap/build/main]
 86,435,862 ( 3.82%)  /usr/lib/gcc/x86_64-linux-gnu/13/include/smmintrin.h:_mm_crc32HashString(string_t)
 60,000,000 ( 2.65%)  ./stdlib/./stdlib/rand.c:rand [/usr/lib/x86_64-linux-gnu/libc.so.6]

--------------------------------------------------------------------------------
-- Auto-annotated source: src/list.cpp
--------------------------------------------------------------------------------
Ir                   

-- line 5 ----------------------------------------
          .           #include <stdalign.h>
          .           
          .           #include "hash_map.h"
          .           #include "list.h"
          .           
          .           static void resizeUp(List* list);
          .           static int cmpListElems(data_t* data1, data_t* data2);
          .           
      6,138 ( 0.00%)  List listCtor(){
      2,046 ( 0.00%)      List list = {.list_elems = NULL, .capacity = LIST_BASE_CAPACITY};
     10,230 ( 0.00%)      list.list_elems = (ListElem*)calloc(LIST_BASE_CAPACITY, sizeof(ListElem));
    523,641 ( 0.02%)  => ./malloc/./malloc/malloc.c:calloc (2,046x)
      2,046 ( 0.00%)      list.list_elems[0].next_inx = 0;
          .               list.list_elems[0].prev_inx = 0;
          .               list.elements_amount = 0;
          .           
      4,092 ( 0.00%)      list.tail_inx = 1;
          .               for (uint32_t i = 1; i < LIST_BASE_CAPACITY; i++){
     12,276 ( 0.00%)          list.list_elems[i].next_inx = i + 1;
          .                   list.list_elems[i].prev_inx = i;
          .               }
          .           
          .               return list;
      6,138 ( 0.00%)  }
          .           
    138,756 ( 0.01%)  int pushListElem(List* list, data_t data){
     69,378 ( 0.00%)      assert(list);
          .           
          .               uint32_t inx = searchElement(list, data);
          .           
          .               if (inx == 0){
     46,252 ( 0.00%)          inx            = list->tail_inx;
     92,504 ( 0.00%)          list->tail_inx = list->list_elems[inx].next_inx;
          .           
     46,252 ( 0.00%)          list->list_elems[inx].data    = data;
     23,126 ( 0.00%)          list->list_elems[inx].counter = 0;
     23,126 ( 0.00%)          uint32_t old_last_inx         = list->list_elems[0].prev_inx;
          .           
     23,126 ( 0.00%)          list->list_elems[inx].next_inx = 0;
     23,126 ( 0.00%)          list->list_elems[inx].prev_inx = old_last_inx;
          .           
     23,126 ( 0.00%)          list->list_elems[0].prev_inx            = inx;
     46,252 ( 0.00%)          list->list_elems[old_last_inx].next_inx = inx;
          .           
     46,252 ( 0.00%)          list->elements_amount++;
          .               }
          .           
     23,126 ( 0.00%)      list->list_elems[inx].counter++;
          .           
     46,252 ( 0.00%)      if (list->tail_inx == list->capacity) resizeUp(list);
          .           
      4,260 ( 0.00%)      return list->list_elems[inx].counter;
    161,882 ( 0.01%)  }
          .           
          .           int popListElem(List* list, data_t data){
          .               assert(list);
          .           
          .               uint32_t inx = searchElement(list, data);
          .           
          .               if (inx == 0) return 0;
          .           
-- line 64 ----------------------------------------
-- line 75 ----------------------------------------
          .               list->list_elems[inx].next_inx = list->tail_inx;
          .               list->tail_inx = inx;
          .           
          .               list->elements_amount--;
          .           
          .               return inx;
          .           }
          .           
 60,000,000 ( 2.65%)  int searchElement(List* list, data_t data){
 20,000,000 ( 0.88%)      assert(list);
          .           
 40,092,504 ( 1.77%)      uint32_t inx = list->list_elems[0].next_inx;
          .           
 96,450,464 ( 4.26%)      while (inx != 0){
202,659,587 ( 8.95%)          if (cmpListElems(&data, &list->list_elems[inx].data) == 0) return inx;
          .           
 76,402,166 ( 3.37%)          inx = list->list_elems[inx].next_inx;
          .               }
          .           
          .               return inx;
 60,000,000 ( 2.65%)  }
          .           
          .           static void resizeUp(List* list){
      8,520 ( 0.00%)      list->capacity  *= 2;
     21,300 ( 0.00%)      list->list_elems = (ListElem*)realloc(list->list_elems, list->capacity * sizeof(ListElem));
  2,321,797 ( 0.10%)  => ./malloc/./malloc/malloc.c:realloc (4,260x)
     17,040 ( 0.00%)      memset(list->list_elems + list->capacity / 2, '\0', list->capacity / 2 * sizeof(ListElem));
    108,612 ( 0.00%)      for (uint32_t i = list->tail_inx; i < list->capacity; i++){
    112,872 ( 0.00%)          list->list_elems[i].next_inx = i + 1;
     30,524 ( 0.00%)          list->list_elems[i].prev_inx = i;
          .               }
          .           }
          .           
          .           extern "C" {
          .               int my_strcmp(const char* str1, const char* str2);
          .           }
          .           
          .           static int cmpListElems(data_t* data1, data_t* data2){
          .               assert(data1);
          .               assert(data2);
          .           
144,603,249 ( 6.38%)      return my_strcmp(data1->string, data2->string);
    868,470 ( 0.04%)  => ???:0x0000000000003910 (144,745x)
          .           }
          .           
      4,092 ( 0.00%)  void listDtor(List* list){
      6,138 ( 0.00%)      assert(list);
          .           
      6,138 ( 0.00%)      free(list->list_elems);
    419,797 ( 0.02%)  => ./malloc/./malloc/malloc.c:free (2,046x)
          .           
          .               list->capacity = 0;
      2,046 ( 0.00%)      list->tail_inx = 0;
      4,092 ( 0.00%)  }
          .           
          .           void debugPrint(List* list){
          .               assert(list);
          .           
          .               printf("CAPACITY: %u\n", list->capacity);
          .               printf("TAIL_INX: %u\n", list->tail_inx);
          .               printf("ELEM_AM : %u\n", list->elements_amount);
          .               printf("INXS:     ");
-- line 133 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/lib/gcc/x86_64-linux-gnu/13/include/smmintrin.h
--------------------------------------------------------------------------------
Ir                  

-- line 828 ----------------------------------------
         .           _mm_crc32_u16 (unsigned int __C, unsigned short __V)
         .           {
         .             return __builtin_ia32_crc32hi (__C, __V);
         .           }
         .           
         .           extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
         .           _mm_crc32_u32 (unsigned int __C, unsigned int __V)
         .           {
86,435,862 ( 3.82%)    return __builtin_ia32_crc32si (__C, __V);
         .           }
         .           
         .           #ifdef __x86_64__
         .           extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
         .           _mm_crc32_u64 (unsigned long long __C, unsigned long long __V)
         .           {
         .             return __builtin_ia32_crc32di (__C, __V);
         .           }
-- line 844 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: src/tests.cpp
--------------------------------------------------------------------------------
Ir                  

-- line 8 ----------------------------------------
         .           #include <random>
         .           
         .           #include "hash_funcs.h"
         .           #include "hash_map.h"
         .           #include "list.h"
         .           #include "utils.h"
         .           #include "tests.h"
         .           
        11 ( 0.00%)  void testAll(const char* filename, uint32_t test_amount){
         1 ( 0.00%)      size_t file_size = 0;
         4 ( 0.00%)      char* text = readFile("book.txt", &file_size);
    62,378 ( 0.00%)  => /root/hashMap/src/utils.cpp:readFile(char const*, unsigned long*) (1x)
         .           
         4 ( 0.00%)      uint32_t lines = countLines(text, file_size);
   234,181 ( 0.01%)  => /root/hashMap/src/utils.cpp:countLines(char*, unsigned long) (1x)
         .           
         4 ( 0.00%)      TestData test_data = {.data_array = buildStringArray(text, lines),
   959,537 ( 0.04%)  => /root/hashMap/src/hash_map.cpp:buildStringArray(char*, unsigned int) (1x)
         .                                     .lines = lines};
         .           
         .               // TEST(crc32);
         .               TEST(_mm_crc32);
         .               // TEST(murmur3);
         .               // TEST(sum);
         .               // TEST(adler32);
         .               // TEST(elf);
         .           
         3 ( 0.00%)      free(text);
       168 ( 0.00%)  => ./malloc/./malloc/malloc.c:free (1x)
         3 ( 0.00%)      free(test_data.data_array[0].string);
        72 ( 0.00%)  => ./malloc/./malloc/malloc.c:free (1x)
         3 ( 0.00%)      free(test_data.data_array);
       213 ( 0.00%)  => ./malloc/./malloc/malloc.c:free (1x)
        10 ( 0.00%)  }
         .           
         .           void test(hash_t hash_func, Filenames filenames, TestData test_data, uint32_t test_amount){
         .               // FILE* collison_file = fopen(filenames.collision_filename, "w");
         .               // testCollisions(collison_file, hash_func, test_data);
         .               // fclose(collison_file);
         .           
         .               // printf("------------------------------\n");
         .           
         .               // FILE* build_file = fopen(filenames.build_filename, "w");
         .               // testBuildTime(build_file, hash_func, test_data, test_amount);
         .               // fclose(build_file);
         .           
         .               // printf("------------------------------\n");
         .           
         5 ( 0.00%)      FILE* search_file = fopen(filenames.search_filename, "w");
       609 ( 0.00%)  => ./libio/./libio/iofopen.c:fopen@@GLIBC_2.2.5 (1x)
         6 ( 0.00%)      testSearchTime(search_file, hash_func, test_data, test_amount);
2,264,035,832 (99.94%)  => src/tests.cpp:testSearchTime(_IO_FILE*, unsigned int (*)(string_t), TestData, unsigned int) (1x)
         3 ( 0.00%)      fclose(search_file);
       411 ( 0.00%)  => ./libio/./libio/iofclose.c:fclose@@GLIBC_2.2.5 (1x)
         .           }
         .           
         .           void testCollisions(FILE* file, hash_t hash_func, TestData test_data){
         .               assert(file);
         .           
         .               HashMap hashMap = hashMapCtor(hash_func, BASE_HASH_MAP_CAPACITY);
         .           
         .               for (int j = 0; j < test_data.lines; j++){
-- line 60 ----------------------------------------
-- line 110 ----------------------------------------
         .               average_time /= test_amount;
         .           
         .               printf("AVERAGE BUILD TIME: %'ld\n", average_time);
         .               printf("STANDART DEVIATION: %'ld\n", standartDeviationTime(build_time_array, test_amount, average_time));
         .           
         .               free(build_time_array);
         .           }
         .           
        18 ( 0.00%)  void testSearchTime(FILE* file, hash_t hash_func, TestData test_data, uint32_t test_amount){
         3 ( 0.00%)      assert(file);
         3 ( 0.00%)      srand(10);
     6,232 ( 0.00%)  => ./stdlib/./stdlib/random.c:srand (1x)
         .           
         7 ( 0.00%)      HashMap hashMap = hashMapCtor(hash_func, BASE_HASH_MAP_CAPACITY);
       800 ( 0.00%)  => /root/hashMap/src/hash_map.cpp:hashMapCtor(unsigned int (*)(string_t), unsigned int) (1x)
    23,394 ( 0.00%)      for (int j = 0; j < test_data.lines; j++){
    31,184 ( 0.00%)          hashMapAddElement(&hashMap, test_data.data_array[j]);
 7,919,465 ( 0.35%)  => /root/hashMap/src/hash_map.cpp:hashMapAddElement(HashMap*, string_t) (7,796x)
         .               }
         .           
         6 ( 0.00%)      uint32_t* index_array = (uint32_t*)calloc(SEARCH_ELEMS_AMOUNT, sizeof(uint32_t));
    41,176 ( 0.00%)  => ./malloc/./malloc/malloc.c:calloc (1x)
         7 ( 0.00%)      int64_t* search_time_array = (int64_t*)calloc(test_amount, sizeof(int64_t));
     8,377 ( 0.00%)  => ./malloc/./malloc/malloc.c:calloc (1x)
         .           
     5,008 ( 0.00%)      for (int i = 0; i < test_amount; i++){
30,004,000 ( 1.32%)          for (int j = 0; j < SEARCH_ELEMS_AMOUNT; j++){
50,000,000 ( 2.21%)              index_array[j] = rand() % test_data.lines;
569,677,420 (25.15%)  => ./stdlib/./stdlib/rand.c:rand (10,000,000x)
         .                   }
         .           
         .                   int64_t start_time = _rdtsc();
         .           
30,001,000 ( 1.32%)          for (int j = 0; j < SEARCH_ELEMS_AMOUNT; j++){
70,000,000 ( 3.09%)              hashMapSearchElement(&hashMap, test_data.data_array[index_array[j]]);
1,506,063,336 (66.48%)  => /root/hashMap/src/hash_map.cpp:hashMapSearchElement(HashMap*, string_t) (10,000,000x)
         .                   }
         .           
         .                   int64_t end_time = _rdtsc();
         .           
     3,000 ( 0.00%)          search_time_array[i] = end_time - start_time;
         .               }
         .           
        11 ( 0.00%)      hashMapDtor(&hashMap);
   236,329 ( 0.01%)  => /root/hashMap/src/hash_map.cpp:hashMapDtor(HashMap*) (1x)
         .           
         5 ( 0.00%)      uint64_t average_time = 0;
         .           
         .               // fprintf(file, "Test index,Time\n");
       766 ( 0.00%)      for (uint32_t i = 0; i < test_amount; i++){
         .                   // fprintf(file, "%u,%ld\n", i, search_time_array[i]);
       250 ( 0.00%)          average_time += search_time_array[i];
         .               }
         .           
         5 ( 0.00%)      average_time /= test_amount;
         .           
         .               printf("AVERAGE SEARCH TIME: %'ld\n", average_time);
         .               printf("STANDART DEVIATION : %'ld\n", standartDeviationTime(search_time_array, test_amount, average_time));
         .           
         3 ( 0.00%)      free(search_time_array);
       228 ( 0.00%)  => ./malloc/./malloc/malloc.c:free (1x)
         6 ( 0.00%)      free(index_array);
       271 ( 0.00%)  => ./malloc/./malloc/malloc.c:free (1x)
         9 ( 0.00%)  }
         .           
         .           int64_t standartDeviationTime(int64_t* time_array, uint32_t length, uint32_t average){
         4 ( 0.00%)      assert(time_array);
         .           
         .               int64_t standart_deviation = 0;
       508 ( 0.00%)      for (uint32_t i = 0; i < length; i++){
     2,506 ( 0.00%)          standart_deviation += (time_array[i] - average) * (time_array[i] - average);
         .               }
         5 ( 0.00%)      standart_deviation = (int64_t)sqrt((float)standart_deviation / length);
         .           
         .               return standart_deviation;
         .           }
         .           
         .           float standartDeviationCollisions(HashMap* hashMap, float average){
         .               assert(hashMap);
         .           
         .               float standart_deviation = 0;
-- line 180 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: src/hash_funcs.cpp
--------------------------------------------------------------------------------
Ir                   

-- line 26 ----------------------------------------
          .               for (int i = 4 - string.length % 4; i > 0; i--){
          .                   chars *= 256;
          .               }
          .               if (chars != 0) hash += crc32_u32(crc, chars);
          .           
          .               return hash;
          .           }
          .           
 10,007,796 ( 0.44%)  uint32_t _mm_crc32HashString(string_t string){
 20,015,592 ( 0.88%)      uint32_t hash   = 0;
          .               uint32_t chars  = 0;
          .               uint32_t crc    = 0x12345678;
 10,007,796 ( 0.44%)      int length =  int(string.length);
          .           
109,638,201 ( 4.84%)      for (int i = 0; i < length; i += 4){
          .                   chars = *(uint32_t*)(string.string + i);
 23,202,339 ( 1.02%)          hash += _mm_crc32_u32(crc, chars);
          .               }
          .           
          .               return hash;
          .           }
          .           
          .           uint32_t murmur3HashString(string_t string){
          .               uint32_t num    = 0x5bd1e995;
          .               uint32_t seed   = 0;
-- line 50 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: src/hash_map.cpp
--------------------------------------------------------------------------------
Ir                  

-- line 12 ----------------------------------------
         .           #include "hash_funcs.h"
         .           #include "hash_map.h"
         .           #include "utils.h"
         .           #include "list.h"
         .           
         .           static uint32_t rehashAddElement(HashMap* hashMap, data_t data);
         .           static HashMap rehash(HashMap* hashMap);
         .           
         8 ( 0.00%)  string_t* buildStringArray(char* text, uint32_t lines){
         3 ( 0.00%)      assert(text);
         .           
         7 ( 0.00%)      string_t* string_array = (string_t*)calloc(lines, sizeof(string_t));
    74,481 ( 0.00%)  => ./malloc/./malloc/malloc.c:calloc (1x)
         7 ( 0.00%)      char* aligned_text     = (char*)aligned_alloc(YMM_BYTES_SIZE, YMM_BYTES_SIZE * lines);
       437 ( 0.00%)  => ./malloc/./malloc/malloc.c:aligned_alloc (1x)
         .               char* word_begin       = NULL;
         .               uint32_t length        = 0;
         .           
    23,394 ( 0.00%)      for (uint32_t i = 0; i < lines; i++){
         .                   word_begin = text;
         .           
         .                   text  = strchr(text, '\n');
    15,592 ( 0.00%)          text++;
         .           
    15,592 ( 0.00%)          length = text - word_begin;
         .           
    23,388 ( 0.00%)          strncpy(aligned_text + 32 * i, word_begin, length);
    46,776 ( 0.00%)          memset(aligned_text + 32 * i + length, '\0', 32 - length);
         .           
    15,592 ( 0.00%)          string_array[i].string = aligned_text + 32 * i;
     7,796 ( 0.00%)          string_array[i].length = length;
         .               }
         .           
         .               return string_array;
         9 ( 0.00%)  }
         .           
        14 ( 0.00%)  HashMap hashMapCtor(hash_t hash_func, uint32_t capacity){
         1 ( 0.00%)      HashMap hashMap = {.lists = NULL,
         .                                  .capacity = capacity,
         .                                  .load_factor = 0,
         2 ( 0.00%)                         .hash_func = hash_func};
         .           
        59 ( 0.00%)      hashMap.lists = (List*)calloc(capacity, sizeof(List));
    48,859 ( 0.00%)  => ./malloc/./malloc/malloc.c:calloc (9x)
         .           
     6,234 ( 0.00%)      for (uint32_t i = 0; i < capacity; i++){
    12,276 ( 0.00%)          hashMap.lists[i] = listCtor();
   566,087 ( 0.02%)  => /root/hashMap/src/list.cpp:listCtor() (2,044x)
         .               }
         .           
         .               return hashMap;
        11 ( 0.00%)  }
         .           
   101,348 ( 0.00%)  uint32_t hashMapAddElement(HashMap* hashMap, data_t data){
    31,184 ( 0.00%)      assert(hashMap);
         .           
    38,980 ( 0.00%)      data.hash = hashMap->hash_func(data);
   201,996 ( 0.01%)  => /root/hashMap/src/hash_funcs.cpp:_mm_crc32HashString(string_t) (7,796x)
    31,184 ( 0.00%)      uint32_t inx = data.hash % hashMap->capacity;
         .           
    77,960 ( 0.00%)      uint32_t counter = pushListElem(hashMap->lists + inx, data);
 2,470,227 ( 0.11%)  => /root/hashMap/src/list.cpp:pushListElem(List*, string_t) (7,796x)
         .           
    15,592 ( 0.00%)      if (counter == 1)
    54,572 ( 0.00%)          hashMap->load_factor = (hashMap->load_factor * hashMap->capacity + 1) / hashMap->capacity;
         .           
    15,592 ( 0.00%)      if (hashMap->load_factor >= LOAD_FACTOR)
        54 ( 0.00%)          *hashMap = rehash(hashMap);
         .           
         9 ( 0.00%)      return inx;
    93,552 ( 0.00%)  }
         .           
         .           uint32_t hashMapPopElement(HashMap* hashMap, data_t data){
         .               assert(hashMap);
         .           
         .               data.hash = hashMap->hash_func(data);
         .               uint32_t inx = data.hash % hashMap->capacity;
         .           
         .               if (popListElem(hashMap->lists + inx, data) == 0) return hashMap->capacity;
         .           
         .               hashMap->load_factor = (hashMap->load_factor * hashMap->capacity - 1) / hashMap->capacity;
         .           
         .               return inx;
         .           }
         .           
40,000,000 ( 1.77%)  bool hashMapSearchElement(HashMap* hashMap, data_t data){
40,000,000 ( 1.77%)      assert(hashMap);
         .           
40,000,000 ( 1.77%)      uint32_t supposed_index = hashMap->hash_func(data) % hashMap->capacity;
259,105,590 (11.44%)  => /root/hashMap/src/hash_funcs.cpp:_mm_crc32HashString(string_t) (10,000,000x)
80,000,000 ( 3.53%)      uint32_t inx = searchElement(&hashMap->lists[supposed_index], data);
986,957,746 (43.57%)  => /root/hashMap/src/list.cpp:searchElement(List*, string_t) (10,000,000x)
         .           
20,000,000 ( 0.88%)      if (inx == 0) return false;
         .           
         .               return true;
40,000,000 ( 1.77%)  }
         .           
         4 ( 0.00%)  void hashMapDtor(HashMap* hashMap){
         2 ( 0.00%)      assert(hashMap);
         .           
     6,189 ( 0.00%)      for (uint32_t i = 0; i < hashMap->capacity; i++){
     7,162 ( 0.00%)          listDtor(hashMap->lists + i);
   213,440 ( 0.01%)  => /root/hashMap/src/list.cpp:listDtor(List*) (1,022x)
         .               }
         .           
     1,052 ( 0.00%)      free(hashMap->lists);
     1,220 ( 0.00%)  => ./malloc/./malloc/malloc.c:free (9x)
         3 ( 0.00%)  }
         .           
         .           static uint32_t rehashAddElement(HashMap* hashMap, data_t data){
         .               assert(hashMap);
         .           
    30,660 ( 0.00%)      uint32_t inx = data.hash % hashMap->capacity;
         .           
   107,310 ( 0.00%)      uint32_t counter = pushListElem(hashMap->lists + inx, data);
 3,611,831 ( 0.16%)  => /root/hashMap/src/list.cpp:pushListElem(List*, string_t) (15,330x)
         .           
         .               return inx;
         .           }
         .           
         .           static HashMap rehash(HashMap* hashMap){
         .               assert(hashMap);
         .           
        54 ( 0.00%)      HashMap new_hashMap = hashMapCtor(hashMap->hash_func, hashMap->capacity * 2);
        27 ( 0.00%)      new_hashMap.load_factor = hashMap->load_factor / 2;
         .           
     5,155 ( 0.00%)      for (uint32_t i = 0; i < hashMap->capacity; i++){
     5,110 ( 0.00%)          uint32_t elem_inx = (hashMap->lists + i)->list_elems[0].next_inx;
         .           
    33,726 ( 0.00%)          while (elem_inx != 0){
    61,320 ( 0.00%)              data_t data = (hashMap->lists + i)->list_elems[elem_inx].data;
    15,330 ( 0.00%)              rehashAddElement(&new_hashMap, data);
         .           
    61,320 ( 0.00%)              elem_inx = (hashMap->lists + i)->list_elems[elem_inx].next_inx;
         .                   }
         .               }
         .           
         .               hashMapDtor(hashMap);
         .           
         .               return new_hashMap;
         .           }
         .           
-- line 143 ----------------------------------------

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./stdlib/./stdlib/rand.c
  ./stdlib/./stdlib/random.c
  ./stdlib/./stdlib/random_r.c

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
1,401,749,669 (61.87%)  events annotated

